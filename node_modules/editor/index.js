var through = require('through') // fix this thing up!

module.exports = function Actions (C) {
  var panel
  var menu
  var search

  if (localStorage.library && localStorage.library.length > 0) {
    var library = JSON.parse(localStorage.library)
  } else library = null

  window.addEventListener('keypress', function toggleVis (e) {
    if (e.keyCode === 32 && e.shiftKey === true || e.keyCode === 27) 
      (C.live === false) 
        ? C.draw()
        : C.erase()
  }, false) 

  var s = through(function Write (d) {
    console.log(d)
  })

  function menuClick (e) {
    e.preventDefault()
    return false
  }

  function updateSearch (e) {
    console.log(e)
    panel.innerHTML = ''
    var str = search.value
    var res = find(library, str) 
    if (res) panel.innerHTML = res.name + ' : ' + res.main
    s.emit('data', {
      type:'put',
      key:'data'+':'+C.id, 
      value: search.value
    })
    setTimeout(function () {
      s.emit('data', {key:'data'+':'+C.id, type:'get'})
    }, 1000)
    setTimeout(function () {
      s.emit('data', {key:'data'+':'+C.id, type:'del'})
    }, 2000)
  }

  C.unbind = function () {
    search.removeEventListener('keyup', updateSearch)
    menu.removeEventListener('click', menuClick)
  }

  C.bind = function (domNode) {
    panel = domNode.querySelector('.panel')
    menu = domNode.querySelector('#actions')
    search = domNode.querySelector('#search')
    search.addEventListener('keyup', updateSearch, false)
    menu.addEventListener('click', menuClick, false)
  }

  C.draw({pages:[{title:'blam'}, {title:'wog'}]})

  return s
}

window.addEventListener('contextmenu', function (e) {
  e.preventDefault()
  var element = e.target
  var parent = element.parentElement // ?
  var id = element.id
  var tag = element.tagName
  var cl = element.className
  
  // provide ui for editing selected object / item
  console.log(element,parent,id, tag, cl)
}, false)

function cmds (e) {
  e.preventDefualt()
  var context
  var d = {}
  var cmd
  var type = e.type

  if (type === 'submit') {
    cmd = e.target[0].value
    context = e.target[1].value
  } else {
    cmd = e.target.textContent
    context = e.target.className
  }
}


// UTILS
function find (haystack, needle) {
  for (hay in haystack) {
    if (needle !== '' && hay.match(needle)) return haystack[hay]
  }
}

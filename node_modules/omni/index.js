var asyncMap = require('slide').asyncMap
var through = require('through2')
var D = require('browser/mini')
var utils = require('utils')
var cancel = utils.cancel

module.exports = function Omni (id, template) { // >>>>>>>>>>>>>>>>>>>>>>>>>

  var library = (!localStorage.library) 
    ? null // get data from db
    : JSON.parse(localStorage.library)

  var s = through.obj(function Write (d, enc, next) { 
    if (d.to && d.to === id)
      grifter.data(d.value)

    next()
  })

  var filters = [['library', 'put', 'delete'],
                 ['layers', 'open', 'delete'],
                 ['canvas', 'save', 'clear']]

  var mode = 'filter'
  var selFilter = 0
  var selAction = 0
  var buffer
  var ctxLive = false
  var live

  // dom >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  var om = D(document.body, template.get('.omni'), utils.UID('omni'))
  var dropzone
  var notify
  var omni
  var edit
  var disp
  var act

  om(function (el) {
    omni = el
    live = true

    edit = D(omni, template.get('.editBox'))
    dropzone = D(omni, template.get('.dropzone'))
    act = D(el.querySelector('.actions'), template.get('.label'))
    notify = D(el.querySelector('.messages'), template.get('.notification'))
    fil = D(el.querySelector('.filter'), template.get('.label'))
    disp = D(el.querySelector('.omnibox'), template.get('.res'))
    fil({txt:filters[selFilter][0]})

    el.querySelector('#search').addEventListener('keyup', keyInput, false)
    el.querySelector('#search').focus()
  }) // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  // mouse/drag/drop interactions >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  var grifter = {
    tools : {},
    target : null,
    moduleID : null,
    property : null,
    data : function (d) { // use target to get prop
      var data = JSON.parse(d)
      var branch = grifter.property
      grifter.tools[grifter.type](function (val) {
        if (branch.length===1) data[branch[0]] = val
        if (branch.length===2) data[branch[0]][branch[1]] = val
        if (branch.length===3) data[branch[0]][branch[1]][branch[2]] = val
        var res = JSON.stringify(data)
        s.push({key:'data', value: {key:'module'+grifter.moduleID, data:res}})
      })
    },
    parse : function (e) {
      if (omni.live === false) return false
      e.preventDefault()
      var t = e.target
      if (t.className.match('grifter')) {t.style.display='none'; return false}
      if (!t.className.match('opt_')) return false
      grifter.target = t
      grifter.type = t.className.split('_')[1]
      grifter.property = t.className.split('_').slice(2)
      grifter.moduleID = utils.climb(t)
      s.push({from:id, key:'get', value:'module:'+grifter.moduleID})
    },
  }

  grifter.tools.image = function (cb) {
    dropzone({
      x : grifter.target.getBoundingClientRect().left + 'px',
      y : grifter.target.getBoundingClientRect().top + 'px',
      h : grifter.target.offsetHeight + 'px',
      w : grifter.target.offsetWidth + 'px'
    }, function (el) {
      el.style.display = 'block'
      el.addEventListener('dragover', cancel, false)
      el.addEventListener('dragenter', cancel, false)
      el.addEventListener('dragleave', cancel, false)
      el.addEventListener('drop', function (e) {
        fileUpload(e, function (d) {
          grifter.target.style.backgroundImage = 'url('+d.data+')'
          grifter.target.style.backgroundScale = 'auto'
          cb('/files/'+d.file)
        })
      })
    })
  }

  grifter.tools.text = function (cb) {
    edit({
      x : grifter.target.getBoundingClientRect().left + 'px',
      y : grifter.target.getBoundingClientRect().top + 'px',
      h : grifter.target.offsetHeight + 'px',
      w : grifter.target.offsetWidth + 'px'
    }, function (el) {
      el.value = grifter.target.innerHTML
      el.addEventListener('keyup', function (ev) {
        grifter.target.innerHTML = el.value
      }, false)
      el.addEventListener('keydown', function (ev) {
        if (ev.shiftKey === true && ev.keyCode === 13) {
          ev.preventDefault()
          el.style.display = 'none'
          cb(el.value)
        }
      }, false)
      el.focus()
    })
  }

  function fileUpload (e, cb) {
    e.preventDefault()
    var files = []
    var droppedFiles = e.dataTransfer.files

    for (var i=0; i<droppedFiles.length; i++) {
      var f = droppedFiles[i]
      if (f.type.match('image.*')) files.push(f)
    }

    asyncMap(files, function handleFile (file, next) {
      var fileName = file.name
      var cleanName = file.name.replace(/ /g,'_')
      var fileID = utils.UID(cleanName)

      var formData = new FormData()
      formData.append('file', cleanName)

      var xhr = new XMLHttpRequest()
      xhr.upload.addEventListener('progress', function (e) { 
        var percent = (e.loaded / e.total) * 100
        notify({message: 'uploading ' + cleanName + percent+' %'})
        if (e.loaded === e.total) setTimeout(function () {
          notify({message:''})
        }, 400)
      }, false) 
      xhr.open('post', '/upload', true) 

      var reader = new FileReader()

      reader.addEventListener('load', function (data) {
        formData.append('id', fileID)
        formData.append('blob', data.target.result)
        xhr.send(formData)
        cb({file:cleanName, data:data.target.result})
        next()
      }, false)

      reader.readAsDataURL(file)
    }, function End () {
      console.dir(droppedFiles)
    })
  } // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  // key interactions >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  window.addEventListener('keydown', keyMappings, false)
  window.addEventListener('contextmenu', grifter.parse, false)

  function keyInput (e) { // execute search based on current filter
    e.preventDefault()
    var str = e.target.value
    var res = utils.search(library.master, str)

    if (res && str != '') {
      buffer = res
      disp({txt : res.name})
      act({txt : '> ' + filters[selFilter].slice(1)[selAction]})
    } else if (!res || str === '') {
      buffer = null
      disp({txt : ''})
      act({txt : ''})
    }
  }

  function sel (incdec) {
    var actions = filters[selFilter].slice(1)

    if (mode === 'filter') {
      selFilter = incDec(incdec, selFilter, 0, filters.length-1)
      fil({txt : filters[selFilter][0]})
    } else if (mode === 'action') {
      selAction = incDec(incdec, selAction, 0, actions.length-1)
      act({txt : '> ' + actions[selAction]})
    }

    function incDec (incdec, val, min, max) {
      if (incdec === 'inc') val++
      if (incdec === 'dec') val--
      if (val < min) val = min
      if (val > max) val = max
      return val
    }
  }

  function exec () {
    // format api msg for canvas save -- use data command
    // key : layer : name -- value is index
    var action = filters[selFilter].slice(1)[selAction]
    s.push({
      key : action,
      value : buffer.name
    })
  }

  function toggle () { // remember focus!
    if (live === true) {
      live = false
      omni.style.display = 'none'
    } else if (live === false) {
      live = true
      omni.style.display = 'block'
      document.body.querySelector('#search').focus()
    }
  }

  function toggleMode () {
    if (mode === 'filter') mode = 'action'
    else if (mode === 'action') mode = 'filter'
  }

  function keyMappings (e) {
    if (e.keyCode === 27) { e.preventDefault(); toggle() }
    if (e.keyCode === 38 && live === true) { e.preventDefault(); sel('inc') }
    if (e.keyCode === 40 && live === true) { e.preventDefault(); sel('dec') }
    if (e.keyCode === 9 && live === true) { e.preventDefault(); toggleMode() }
    if (e.shiftKey === false && e.keyCode === 13 && live === true) { 
      e.preventDefault(); exec() 
    }
  } // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  return s
}

var asyncMap = require('slide').asyncMap
var through = require('through2') // fix this thing up!
var utils = require('utils')
var R = require('browser/mini')

module.exports = function Actions (C) {
  var library
  var omnibox
  var status

  window.addEventListener('keydown', keyMappings, false)
  window.addEventListener('contextmenu', ctx, false)

  if (localStorage.library && localStorage.library.length > 0) {
    library = JSON.parse(localStorage.library)
  } else library = null // request library

  var s = through.obj(function Write (d, enc, next) { 
    if (d.key && d.key.split(':')[0] === 'library') {
      console.log(d.value)
      library = JSON.parse(d.value)
    }
    next()
  })

  function keyMappings (e) {
    if (e.keyCode === 38) { omni.live = false; search.focus() }
    if (e.keyCode === 37) omni.prev()
    if (e.keyCode === 39) omni.next()
    if (C.live && omni.live === true && e.keyCode === 13) omni.go()
    if (e.keyCode === 27 ) { // keybindings!
      e.preventDefault();
      (C.live === false) ? C.draw() : C.erase()
      return false
    }
  }

  function inputCmd (e) {
    e.preventDefault()
    omnibox.innerHTML = ''
    var str = search.value
    var res = utils.search(library, str) 

    if (res) {// preview res
    } else omni._ = null

    if (e.keyCode===40||e.keyCode===39||e.keyCode===13||e.keyCode===9) {
      e.preventDefault()
      search.blur()
    }
  }
 
  function ctx (e) {
    e.preventDefault()
    var element = e.target
    var id = element.id
    var parent = element.parentElement // ?
    var cl = element.className
    var tag = element.tagName
    console.log(parent, parent.id, tag, cl)
  }
  
  function fileUpload (e) {
    e.preventDefault()
    var files = []
    var droppedFiles = e.dataTransfer.files
    var msg = R(messages, '<li id="{{id}}">{{body}}</li>')

    for (var i=0; i<droppedFiles.length; i++) {
      var f = droppedFiles[i]
      if (f.type.match('image.*')) files.push(f)
    }

    asyncMap(files, function handleFile (file, next) {
      var fileName = file.name
      var cleanName = file.name.replace(/ /g,'_')
      var id = utils.UID(cleanName)

      var formData = new FormData()
      formData.append('file', cleanName)

      var xhr = new XMLHttpRequest()
      xhr.upload.addEventListener('progress', function (e) { 
        var percent = (e.loaded / e.total)*100
        msg.draw({id: id, body: 'uploading ' + cleanName +' : '+ percent})
        if (e.loaded === e.total) setTimeout(function () { msg.erase() }, 1000)
      }, false) 
      xhr.open('post', '/upload', true) 

      var reader = new FileReader()
      reader.addEventListener('load', function (data) {
        formData.append('id', id)
        formData.append('blob', data.target.result)
        xhr.send(formData)
        next()
      }, false)
      reader.readAsDataURL(file)
    }, function End () {
      console.dir(droppedFiles)
    })
  }

  C.onErase = function () {
    console.log('erased')
    search.removeEventListener('keyup', updateSearch)
    omnibox.removeEventListener('drop', fileUpload)
    omnibox.removeEventListener('dragenter', cancel)
    omnibox.removeEventListener('dragover', cancel)
    omnibox.removeEventListener('dragleave', cancel)
  }

  C.onDraw = function (domNode) {
    console.log('draw')
    omnibox = domNode.querySelector('.omnibox')
    messages = domNode.querySelector('.messages')
    omnibox.addEventListener('dragleave', cancel, false)
    omnibox.addEventListener('dragover', cancel, false)
    omnibox.addEventListener('dragenter', cancel, false)
    omnibox.addEventListener('drop', fileUpload, false)
    search = domNode.querySelector('#search')
    search.addEventListener('keyup', inputCmd, false)
    search.focus()
  }

  return s
}

function cancel (e) {
  e.preventDefault()
  if (e.stopPropogation) e.stopPropogation()
  return false
}

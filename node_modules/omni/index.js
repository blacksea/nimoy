var asyncMap = require('slide').asyncMap
var through = require('through2')
var D = require('browser/mini')
var utils = require('utils')
var cancel = utils.cancel

module.exports = function Actions (id, template) {

  var library = (!localStorage.library) 
    ? null // get data from db
    : JSON.parse(localStorage.library)

  var s = through.obj(function Write (d, enc, next) { 
    if (d.to && d.to === id) console.log('omni', d)
    next()
  })

  var filters = [['library', 'put', 'delete'],
                 ['layers', 'open', 'delete'],
                 ['canvas', 'save', 'clear']]

  var mode = 'filter'
  var selFilter = 0
  var selAction = 0
  var omniNode
  var buffer
  var ctxLive = false
  var live

  // dom >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  var om = D(document.body, template.get('.omni'), utils.UID('omni'))
  var drop
  var edit
  var notify
  var disp
  var act

  om(function (el) {
    omniNode = el
    live = true
    drop = D(el, template.get('.dropzone'))
    edit = D(el, template.get('.edit'))
    notify = D(el.querySelector('.messages'), template.get('.notification'))
    act = D(el.querySelector('.actions'), template.get('.label'))
    fil = D(el.querySelector('.filter'), template.get('.label'))
    disp = D(el.querySelector('.omnibox'), template.get('.res'))
    fil({txt:filters[selFilter][0]})
    el.querySelector('#search').addEventListener('keyup', keyInput, false)
    el.querySelector('#search').focus()
  }) // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


  // key interactions >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  window.addEventListener('keydown', keyMappings, false)
  window.addEventListener('contextmenu', contextMenu, false)

  function keyInput (e) { // execute search based on current filter
    e.preventDefault()
    var str = e.target.value
    var res = utils.search(library.master, str)

    if (res && str != '') {
      buffer = res
      disp({txt:res.name})
      act({txt:'> '+filters[selFilter].slice(1)[selAction]})
    } else if (!res || str === '') {
      buffer = null
      disp({txt:''})
      act({txt:''})
    }
  }

  function sel (incdec) {
    var actions = filters[selFilter].slice(1)

    if (mode === 'filter') {
      selFilter = incDec(incdec, selFilter, 0, filters.length-1)
      fil({txt:filters[selFilter][0]})
    } else if (mode === 'action') {
      selAction = incDec(incdec, selAction, 0, actions.length-1)
      act({txt:'> '+actions[selAction]})
    }

    function incDec (incdec, val, min, max) {
      if (incdec==='inc') val++
      if (incdec==='dec') val--
      if (val < min) val = min
      if (val > max) val = max
      return val
    }
  }

  function exec () {
    var action = filters[selFilter].slice(1)[selAction]
    s.push({
      key : action,
      value : buffer.name
    })
  }

  function toggle () {
    // remember focus!
    if (live === true) {
      live = false
      omniNode.style.display = 'none'
    } else if (live === false) {
      live = true
      omniNode.style.display = 'block'
      document.body.querySelector('#search').focus()
    }
  }

  function toggleMode () {
    if (mode === 'filter') mode = 'action'
    else if (mode === 'action') mode = 'filter'
  }

  function keyMappings (e) {
    if (e.keyCode === 27) { e.preventDefault(); toggle() }
    if (e.keyCode === 38 && live === true) { e.preventDefault(); sel('inc') }
    if (e.keyCode === 40 && live === true) { e.preventDefault(); sel('dec') }
    if (e.keyCode === 9 && live === true) { e.preventDefault(); toggleMode() }
    if (e.keyCode === 13 && live === true) { e.preventDefault(); exec() }
  } // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


  // mouse/drag/drop interactions >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  function contextMenu (e) { 
    e.preventDefault()

    ctxLive = true

    var type = (e.target.className.match('opt_')) 
      ? e.target.className.split('opt_')[1].split(' ')[0] 
      : null

    var bounds = {
      x : e.target.getBoundingClientRect().left+'px',
      y : e.target.getBoundingClientRect().top+'px',
      w : e.target.offsetWidth+'px',
      h : e.target.offsetHeight+'px'
    }

    if (type === 'image')
      drop(bounds, bindDropZone)

    if (type === 'text') 
      edit(bounds, function (el) {
        el.value = e.target.innerHTML
        el.addEventListener('keyup', function (ev) {
          e.target.innerHTML = el.value
        }, false)
      })

    // interrupt / execute
    // hide if edit or image
  }

  function bindDropZone (dz) {
    dz.addEventListener('drop', fileUpload, false)
    dz.addEventListener('dragover', cancel, false)
    dz.addEventListener('dragenter', cancel, false)
    dz.addEventListener('dragleave', cancel, false)
  }



  function fileUpload (e) {
    e.preventDefault()
    var files = []
    var droppedFiles = e.dataTransfer.files

    for (var i=0; i<droppedFiles.length; i++) {
      var f = droppedFiles[i]
      if (f.type.match('image.*')) files.push(f)
    }

    asyncMap(files, function handleFile (file, next) {
      var fileName = file.name
      var cleanName = file.name.replace(/ /g,'_')
      var id = utils.UID(cleanName)

      var formData = new FormData()
      formData.append('file', cleanName)

      var xhr = new XMLHttpRequest()
      xhr.upload.addEventListener('progress', function (e) { 
        var percent = (e.loaded / e.total)*100
        notify({message: 'uploading ' + cleanName + percent+' %'})
        if (e.loaded === e.total) setTimeout(function () {
          notify({message:''})
        }, 400)
      }, false) 
      xhr.open('post', '/upload', true) 

      var reader = new FileReader()

      reader.addEventListener('load', function (data) {
        formData.append('id', id)
        formData.append('blob', data.target.result)
        xhr.send(formData)
        // clear dropzone && set image src
        next()
      }, false)

      reader.readAsDataURL(file)
    }, function End () {
      console.dir(droppedFiles)
    })
  } // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  return s

}

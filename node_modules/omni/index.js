var asyncMap = require('slide').asyncMap
var through = require('through2')
var D = require('browser/mini')
var utils = require('utils')
var cancel = utils.cancel


module.exports = function Omni (id, template) { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>
  var live

  var library = (!localStorage.library) 
    ? null // get data from db
    : JSON.parse(localStorage.library)

  var s = through.obj(function Write (d, enc, next) { 
    if (d.to && d.to === id)
      grifter.data(d.value)

    next()
  })

  // key interactions >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  window.addEventListener('keydown', keyMappings, false)

  function keyMappings (e) {
    if (e.keyCode === 27) { e.preventDefault(); om.toggle() }
    if (e.keyCode === 40 || e.keyCode === 38 && live) {
      e.preventDefault() 
      var incdec = (e.keyCode===38) ? 'inc' : 'dec'
      om.sel(incdec) 
    }
  } // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  var grifter = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    tools : {},
    target : null,
    moduleID : null,
    property : null,
    data : function (d) { // use target to get prop
      var data = JSON.parse(d)
      var branch = grifter.property
      grifter.tools[grifter.type](function (val) {

        if (branch.length === 1) data[branch[0]] = val
        if (branch.length === 2) data[branch[0]][branch[1]] = val
        if (branch.length === 3) data[branch[0]][(branch[1]-1)][branch[2]] = val
        var res = JSON.stringify(data)
        s.push({key:'data', value: {key:'module:'+grifter.moduleID, data:res}})
      })
    },
    parse : function (e) {
      if (live === false) return false
      e.preventDefault()
      var t = e.target
      if (t.className.match('grifter')) {t.style.display='none'; return false}
      if (!t.className.match('opt_')) return false
      grifter.target = t
      grifter.type = t.className.split('_')[1]
      grifter.property = t.className.split('_').slice(2)
      grifter.moduleID = utils.climb(t)
      s.push({from:id, key:'get', value:'module:'+grifter.moduleID})
    }
  }
  grifter.tools.image = function (cb) {
    dropzone({
      x : grifter.target.getBoundingClientRect().left + 'px',
      y : grifter.target.getBoundingClientRect().top + 'px',
      h : grifter.target.offsetHeight + 'px',
      w : grifter.target.offsetWidth + 'px'
    }, function (el) {
      el.style.display = 'block'
      el.addEventListener('dragover', cancel, false)
      el.addEventListener('dragenter', cancel, false)
      el.addEventListener('dragleave', cancel, false)
      el.addEventListener('drop', function (e) {
        fileUpload(e, function (d) {
          grifter.target.style.backgroundImage = 'url('+d.data+')'
          grifter.target.style.backgroundScale = 'auto'
          cb('/files/'+d.file)
        })
      })
    })
  }
  grifter.tools.text = function (cb) {
    edit({
      x : grifter.target.getBoundingClientRect().left + 'px',
      y : grifter.target.getBoundingClientRect().top + 'px',
      h : grifter.target.offsetHeight + 'px',
      w : grifter.target.offsetWidth + 'px'
    }, function (el) {
      el.value = grifter.target.innerHTML
      el.addEventListener('keyup', function (ev) {
        grifter.target.innerHTML = el.value
      }, false)
      el.addEventListener('keydown', function (ev) {
        if (ev.shiftKey === true && ev.keyCode === 13) {
          ev.preventDefault()
          el.style.display = 'none'
          cb(el.value)
        }
      }, false)
      el.focus()
    })
  } // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  var om = { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    value : null,
    commands : [ 
      {txt:'find module', cmd:''},
      {txt:'open canvas', cmd:''},
      {txt:'save canvas', cmd:''}
    ],
    input : function (e) {
      e.preventDefault()
      var str = e.target.value // mode sets behaviour

      var res = (om.filters[om.filterIndex[0]][0]==='library') 
        ? utils.search(library.master, str).name
        : str

      if (res && str !== '') {
        om.value = res
        disp({txt : res.name})
        act({txt:'> ' + om.filters[om.filterIndex[0]][om.filterIndex[1]]})
      } else if (!res || str === '') {
        om.value = null
        disp({txt : ''})
        act({txt : ''})
      }
      if (e.keyCode === 13 && str !== '') om.exec()
    },
    exec : function () {
      var a = om.filters[om.filterIndex[0]][om.filterIndex[1]]
      var f = om.filters[om.filterIndex[0]][0]
      s.push({
        key : f+':'+a,
        value : om.value
      })
    },
    toggle : function () {
      if (live === true) {
        live = false
        omni.style.display = 'none'
      } else if (live === false) {
        live = true
        omni.style.display = 'block'
        document.body.querySelector('#search').focus()
      }
    },
    sel : function (incdec) {
        var max = om.filters[om.filterIndex[0]].length-1
        var val = om.filterIndex[1]
        om.filterIndex[1] = utils.incdec(incdec, val, 1, max)
        act({txt:'> '+om.filters[om.filterIndex[0]][om.filterIndex[1]]})

        var val = om.filterIndex[0]
        var max = om.filters.length-1
        om.filterIndex[0] = utils.incdec(incdec, val, 0, max)
        fil({txt:om.filters[om.filterIndex[0]][0]})
      }
    }
  } // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  
  // dom >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  var dropzone
  var notify
  var omni
  var edit
  var disp
  var act
  var tmpl = template.get('.omni')

  D(document.body, tmpl, utils.cuid()).draw( om.commands, function (el) {
    omni = el
    live = true

    edit = D(omni, template.get('.editBox')).draw
    dropzone = D(omni, template.get('.dropzone')).draw
    fil = D(el.querySelector('.filter'), template.get('.label')).draw
    disp = D(el.querySelector('.omnibox'), template.get('.res')).draw
    act = D(el.querySelector('.actions'), template.get('.label')).draw
    notify = D(el.querySelector('.messages'), 
               template.get('.notification')).draw
    fil({txt:om.filters[om.filterIndex[0]][0]})
    el.querySelector('#search').addEventListener('keyup', om.input, false)
    el.querySelector('#search').focus()
  }) // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  function fileUpload (e, cb) {
    e.preventDefault()
    var files = []
    var droppedFiles = e.dataTransfer.files

    for (var i=0; i<droppedFiles.length; i++) {
      var f = droppedFiles[i]
      if (f.type.match('image.*')) files.push(f)

    }

    asyncMap(files, function handleFile (file, next) {
      var fileName = file.name
      var cleanName = file.name.replace(/ /g,'_')
      var fileID = utils.cuid()

      var formData = new FormData()
      formData.append('file', cleanName)

      var xhr = new XMLHttpRequest()
      xhr.upload.addEventListener('progress', function (e) { 
        var percent = (e.loaded / e.total) * 100
        notify({message: 'uploading ' + cleanName + percent+' %'})
        if (e.loaded === e.total) setTimeout(function () {
          notify({message:''})
        }, 400)
      }, false) 
      xhr.open('post', '/upload', true) 

      var reader = new FileReader()

      reader.addEventListener('load', function (data) {
        formData.append('id', fileID)
        formData.append('blob', data.target.result)
        xhr.send(formData)
        cb({file:cleanName, data:data.target.result})
        next()
      }, false)

      reader.readAsDataURL(file)
    }, function End () { console.dir(droppedFiles) })
  } // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  window.addEventListener('contextmenu', grifter.parse, false)

  return s
}

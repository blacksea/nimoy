var t = require('templayed')

module.exports = function (parent, markup, id) { 
  var domNode

  if (!markup || !parent) return null

  var template = {
    get : function (selector) {
      var div = document.createElement('div')
      div.innerHTML = markup

      var part = div.querySelector(selector)
      if (!part) return null

      return document.createElement('div')
               .appendChild(part).parentElement.innerHTML
    },
    draw : function (data, cb) {
      var div = document.createElement('div')

      // just callback if there isn't any data
      if (data instanceof Function) {
        div.innerHTML = markup
        cb = data
      } else div.innerHTML = t(markup)(data)

      if (domNode) {
        var newNode = div.removeChild(div.firstChild)
        parent.replaceChild(newNode, domNode)
        domNode = newNode
      } else if (!domNode) {
        domNode = div.removeChild(div.firstChild)
        parent.appendChild(domNode)
      }

      if (id) domNode.id = id
      if (cb) cb(domNode)
    },
    erase : function () {
      parent.removeChild(domNode)
    }
  }

  return template
}
